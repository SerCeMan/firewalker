From 2d872985346dc70dc66c0139c4d68c8cbedabe3f Mon Sep 17 00:00:00 2001
From: Nathan Fowler <nfowler@canva.com>
Date: Mon, 25 Mar 2024 10:20:41 +1030
Subject: [PATCH 3/3] Add extra functions and fix managed lists

---
 engine/src/rhs_types/list.rs |   2 +-
 ffi/src/lib.rs               | 215 ++++++++++++++++++++++++++++++++---
 2 files changed, 198 insertions(+), 19 deletions(-)

diff --git a/engine/src/rhs_types/list.rs b/engine/src/rhs_types/list.rs
index 4521b3e..2c91ad4 100644
--- a/engine/src/rhs_types/list.rs
+++ b/engine/src/rhs_types/list.rs
@@ -22,7 +22,7 @@ impl<'i> Lex<'i> for ListName {
             rest = iter.as_str();
             match iter.next() {
                 Some(c) => match c {
-                    'a'..='z' | '0'..='9' | '_' => res.push(c),
+                    'a'..='z' | '0'..='9' | '_' | '.' => res.push(c),
                     _ => {
                         if res.is_empty() {
                             return Err((
diff --git a/ffi/src/lib.rs b/ffi/src/lib.rs
index d0309d7..3a897b1 100644
--- a/ffi/src/lib.rs
+++ b/ffi/src/lib.rs
@@ -12,11 +12,17 @@ use fnv::FnvHasher;
 use num_enum::{IntoPrimitive, TryFromPrimitive};
 use std::{
     convert::TryFrom,
+    convert::TryInto,
     hash::Hasher,
     io::{self, Write},
     net::IpAddr,
 };
-use wirefilter::{AlwaysList, AlwaysListMatcher, Array, DefaultCompiler, ExecutionContext, FieldIndex, Filter, FilterAst, FunctionArgKind, FunctionArgs, IntListStore, IpListStore, LhsValue, List, ListDefinition, Map, NeverList, NeverListMatcher, ParseError, Scheme, SimpleFunctionDefinition, SimpleFunctionImpl, SimpleFunctionParam, Type};
+use wirefilter::{
+    AlwaysList, AlwaysListMatcher, Array, DefaultCompiler, ExecutionContext, FieldIndex, Filter,
+    FilterAst, FunctionArgKind, FunctionArgs, IntListStore, IpListStore, LhsValue, List,
+    ListDefinition, Map, NeverList, NeverListMatcher, ParseError, Scheme, SimpleFunctionDefinition,
+    SimpleFunctionImpl, SimpleFunctionOptParam, SimpleFunctionParam, Type,
+};
 
 const VERSION: &str = env!("CARGO_PKG_VERSION");
 
@@ -164,6 +170,20 @@ fn all_function<'a>(args: FunctionArgs<'_, 'a>) -> Option<LhsValue<'a>> {
     }
 }
 
+fn ends_with_function<'a>(args: FunctionArgs<'_, 'a>) -> Option<LhsValue<'a>> {
+    let input = args.next()?.ok()?;
+    let literal = args.next()?.ok()?;
+    match input {
+        LhsValue::Bytes(bytes) => {
+            if let LhsValue::Bytes(val) = literal {
+                return Some(LhsValue::Bool(bytes.ends_with(&val)));
+            };
+            panic!("Invalid type: expected Bytes, got {:?}", literal)
+        }
+        _ => panic!("Invalid type: expected Bytes, got {:?}", input),
+    }
+}
+
 fn lower_function<'a>(args: FunctionArgs<'_, 'a>) -> Option<LhsValue<'a>> {
     let input = args.next()?.ok()?;
     match input {
@@ -172,6 +192,79 @@ fn lower_function<'a>(args: FunctionArgs<'_, 'a>) -> Option<LhsValue<'a>> {
     }
 }
 
+fn substring_function<'a>(args: FunctionArgs<'_, 'a>) -> Option<LhsValue<'a>> {
+    let input = args.next()?.ok()?;
+    let literal = args.next()?.ok()?;
+    match input {
+        LhsValue::Bytes(bytes) => {
+            if let LhsValue::Int(start) = literal {
+                let opt_end_idx = args.next()?.ok()?;
+                // Normalize end_idx
+                // if its under 0 or equals 0 (not provided) then subtract from len
+                let end_idx = match opt_end_idx {
+                    LhsValue::Int(maybe_idx) => {
+                        let mut normalized_idx = maybe_idx;
+                        if maybe_idx <= 0 {
+                            normalized_idx = bytes.len() as i32 + maybe_idx;
+                        }
+                        normalized_idx
+                    }
+                    _ => panic!("Invalid type: expected Int, got {:?}", opt_end_idx),
+                };
+                //Normalize start index if negative
+                let start_idx = match start {
+                    0.. => start,
+                    _ => bytes.len() as i32 - 1 + start,
+                };
+                if start_idx >= end_idx {
+                    panic!(
+                        "Invalid index: Start index: {:?} is not smaller than End index {:?}",
+                        start_idx, end_idx
+                    )
+                }
+                let substring = &bytes[start_idx.try_into().ok()?..end_idx.try_into().ok()?];
+                return Some(LhsValue::Bytes(substring.to_owned().into()));
+            };
+            panic!("Invalid type: expected Bytes, got {:?}", literal)
+        }
+        _ => panic!("Invalid type: expected Bytes, got {:?}", input),
+    }
+}
+fn remove_bytes_function<'a>(args: FunctionArgs<'_, 'a>) -> Option<LhsValue<'a>> {
+    let input = args.next()?.ok()?;
+    let literal = args.next()?.ok()?;
+    match input {
+        LhsValue::Bytes(bytes) => {
+            if let LhsValue::Bytes(val) = literal {
+                let filtered: Vec<_> = bytes
+                    .iter()
+                    .filter(|b| !val.contains(b))
+                    .map(|&f| f)
+                    .collect();
+                return Some(LhsValue::Bytes(filtered.try_into().unwrap()));
+            };
+            panic!("Invalid type: expected Bytes, got {:?}", literal)
+        }
+        _ => panic!("Invalid type: expected Bytes, got {:?}", input),
+    }
+}
+
+//add regex replace
+
+fn starts_with_function<'a>(args: FunctionArgs<'_, 'a>) -> Option<LhsValue<'a>> {
+    let input = args.next()?.ok()?;
+    let literal = args.next()?.ok()?;
+    match input {
+        LhsValue::Bytes(bytes) => {
+            if let LhsValue::Bytes(val) = literal {
+                return Some(LhsValue::Bool(bytes.starts_with(&val)));
+            };
+            panic!("Invalid type: expected Bytes, got {:?}", literal)
+        }
+        _ => panic!("Invalid type: expected Bytes, got {:?}", input),
+    }
+}
+
 fn upper_function<'a>(args: FunctionArgs<'_, 'a>) -> Option<LhsValue<'a>> {
     let input = args.next()?.ok()?;
     match input {
@@ -192,9 +285,7 @@ fn url_decode<'a>(args: FunctionArgs<'_, 'a>) -> Option<LhsValue<'a>> {
 }
 
 #[no_mangle]
-pub extern "C" fn add_standard_functions(
-    scheme: &mut Scheme,
-) {
+pub extern "C" fn add_standard_functions(scheme: &mut Scheme) {
     scheme
         .add_function(
             "any".into(),
@@ -223,6 +314,26 @@ pub extern "C" fn add_standard_functions(
             },
         )
         .unwrap();
+    scheme
+        .add_function(
+            "ends_with".into(),
+            SimpleFunctionDefinition {
+                params: vec![
+                    SimpleFunctionParam {
+                        arg_kind: FunctionArgKind::Field,
+                        val_type: Type::Bytes,
+                    },
+                    SimpleFunctionParam {
+                        arg_kind: FunctionArgKind::Literal,
+                        val_type: Type::Bytes,
+                    },
+                ],
+                opt_params: vec![],
+                return_type: Type::Bool,
+                implementation: SimpleFunctionImpl::new(ends_with_function),
+            },
+        )
+        .unwrap();
     scheme
         .add_function(
             "lower".into(),
@@ -237,6 +348,69 @@ pub extern "C" fn add_standard_functions(
             },
         )
         .unwrap();
+    scheme
+        .add_function(
+            "remove_bytes".into(),
+            SimpleFunctionDefinition {
+                params: vec![
+                    SimpleFunctionParam {
+                        arg_kind: FunctionArgKind::Field,
+                        val_type: Type::Bytes,
+                    },
+                    SimpleFunctionParam {
+                        arg_kind: FunctionArgKind::Literal,
+                        val_type: Type::Bytes,
+                    },
+                ],
+                opt_params: vec![],
+                return_type: Type::Bytes,
+                implementation: SimpleFunctionImpl::new(remove_bytes_function),
+            },
+        )
+        .unwrap();
+    scheme
+        .add_function(
+            "starts_with".into(),
+            SimpleFunctionDefinition {
+                params: vec![
+                    SimpleFunctionParam {
+                        arg_kind: FunctionArgKind::Field,
+                        val_type: Type::Bytes,
+                    },
+                    SimpleFunctionParam {
+                        arg_kind: FunctionArgKind::Literal,
+                        val_type: Type::Bytes,
+                    },
+                ],
+                opt_params: vec![],
+                return_type: Type::Bool,
+                implementation: SimpleFunctionImpl::new(starts_with_function),
+            },
+        )
+        .unwrap();
+    scheme
+        .add_function(
+            "substring".into(),
+            SimpleFunctionDefinition {
+                params: vec![
+                    SimpleFunctionParam {
+                        arg_kind: FunctionArgKind::Field,
+                        val_type: Type::Bytes,
+                    },
+                    SimpleFunctionParam {
+                        arg_kind: FunctionArgKind::Literal,
+                        val_type: Type::Int,
+                    },
+                ],
+                opt_params: vec![SimpleFunctionOptParam {
+                    arg_kind: FunctionArgKind::Literal,
+                    default_value: LhsValue::Int(0),
+                }],
+                return_type: Type::Bytes,
+                implementation: SimpleFunctionImpl::new(substring_function),
+            },
+        )
+        .unwrap();
     scheme
         .add_function(
             "upper".into(),
@@ -281,30 +455,29 @@ pub extern "C" fn add_standard_functions(
         .unwrap();
 
     scheme
-        .add_list(Type::Int.into(),  Box::new(IntListStore::new()))
+        .add_list(Type::Int.into(), Box::new(IntListStore::new()))
         .unwrap();
     scheme
-        .add_list(Type::Ip.into(),  Box::new(IpListStore::new()))
+        .add_list(Type::Ip.into(), Box::new(IpListStore::new()))
         .unwrap();
     scheme
-        .add_list(Type::Bytes.into(),  Box::new(NeverList::default()))
+        .add_list(Type::Bytes.into(), Box::new(NeverList::default()))
         .unwrap();
 }
 
 #[no_mangle]
-pub extern "C" fn set_all_lists_to_nevermatch(
-    exec_context: &mut ExecutionContext<'_>,
-) -> bool {
+pub extern "C" fn set_all_lists_to_nevermatch(exec_context: &mut ExecutionContext<'_>) -> bool {
     let list = exec_context.scheme().get_list(&Type::Bytes).unwrap();
-    exec_context.set_list_matcher(list, NeverListMatcher {}).unwrap();
+    exec_context
+        .set_list_matcher(list, NeverListMatcher {})
+        .unwrap();
     return true;
 }
 
-
 #[no_mangle]
 pub extern "C" fn wirefilter_setup_int_lists(
     exec_context: &mut ExecutionContext<'_>,
-    int_map: RustBox<LhsValue<'_>>
+    int_map: RustBox<LhsValue<'_>>,
 ) {
     let list = exec_context.scheme().get_list(&Type::Int).unwrap();
     let mut int_lists = IntListStore::new();
@@ -326,7 +499,7 @@ pub extern "C" fn wirefilter_setup_int_lists(
 #[no_mangle]
 pub extern "C" fn wirefilter_setup_ip_lists(
     exec_context: &mut ExecutionContext<'_>,
-    ip_map: RustBox<LhsValue<'_>>
+    ip_map: RustBox<LhsValue<'_>>,
 ) {
     let list = exec_context.scheme().get_list(&Type::Ip).unwrap();
     let mut ip_lists = IpListStore::new();
@@ -345,8 +518,6 @@ pub extern "C" fn wirefilter_setup_ip_lists(
     exec_context.set_list_matcher(list, ip_lists).unwrap();
 }
 
-
-
 #[no_mangle]
 pub extern "C" fn wirefilter_create_scheme() -> RustBox<Scheme> {
     Default::default()
@@ -1172,7 +1343,11 @@ mod ffi_test {
             let mut int_map = wirefilter_create_map(Type::Array(Box::new(Type::Int)).into());
             let mut test_list_arr = wirefilter_create_array(Type::Int.into());
             wirefilter_add_int_value_to_array(&mut test_list_arr, 0, 42);
-            wirefilter_add_array_value_to_map(&mut int_map, ExternallyAllocatedByteArr::from("test_list"), test_list_arr);
+            wirefilter_add_array_value_to_map(
+                &mut int_map,
+                ExternallyAllocatedByteArr::from("test_list"),
+                test_list_arr,
+            );
             wirefilter_setup_int_lists(&mut ctx, int_map);
 
             assert!(match_filter(r#"num1 in $test_list"#, &scheme, &ctx));
@@ -1190,7 +1365,11 @@ mod ffi_test {
             let mut ip_map = wirefilter_create_map(Type::Array(Box::new(Type::Ip)).into());
             let mut test_list_arr = wirefilter_create_array(Type::Ip.into());
             wirefilter_add_ipv4_value_to_array(&mut test_list_arr, 0, &[127, 0, 0, 1]);
-            wirefilter_add_array_value_to_map(&mut ip_map, ExternallyAllocatedByteArr::from("test_list"), test_list_arr);
+            wirefilter_add_array_value_to_map(
+                &mut ip_map,
+                ExternallyAllocatedByteArr::from("test_list"),
+                test_list_arr,
+            );
             wirefilter_setup_ip_lists(&mut ctx, ip_map);
 
             assert!(match_filter(r#"ip1 in $test_list"#, &scheme, &ctx));
-- 
2.43.1

